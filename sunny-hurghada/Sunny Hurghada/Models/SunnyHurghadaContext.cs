// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Sunny_Hurghada.Models;

public partial class SunnyHurghadaContext : DbContext
{
    public SunnyHurghadaContext(DbContextOptions<SunnyHurghadaContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Destination> Destinations { get; set; }

    public virtual DbSet<Guest> Guests { get; set; }

    public virtual DbSet<Language> Languages { get; set; }

    public virtual DbSet<Tour> Tours { get; set; }

    public virtual DbSet<TourBooking> TourBookings { get; set; }

    public virtual DbSet<TourLocalized> TourLocalizeds { get; set; }

    public virtual DbSet<TourPhoto> TourPhotos { get; set; }

    public virtual DbSet<TourType> TourTypes { get; set; }

    public virtual DbSet<TourTypeLocalized> TourTypeLocalizeds { get; set; }

    public virtual DbSet<TransferBooking> TransferBookings { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Destination>(entity =>
        {
            entity.ToTable("Destination");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.Photo)
                .IsRequired()
                .HasMaxLength(200);
        });

        modelBuilder.Entity<Guest>(entity =>
        {
            entity.ToTable("Guest");

            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Language>(entity =>
        {
            entity.ToTable("Language");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Tour>(entity =>
        {
            entity.ToTable("Tour");

            entity.Property(e => e.AdultPrice).HasColumnType("decimal(6, 2)");
            entity.Property(e => e.ChildPrice).HasColumnType("decimal(6, 2)");
            entity.Property(e => e.Duration)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.MainPhoto)
                .IsRequired()
                .HasMaxLength(200);

            entity.HasOne(d => d.Destination).WithMany(p => p.Tours)
                .HasForeignKey(d => d.DestinationId)
                .HasConstraintName("FK_Tour_Destination");

            entity.HasOne(d => d.TourType).WithMany(p => p.Tours)
                .HasForeignKey(d => d.TourTypeId)
                .HasConstraintName("FK_Tour_TourType");
        });

        modelBuilder.Entity<TourBooking>(entity =>
        {
            entity.ToTable("TourBooking");

            entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");
            entity.Property(e => e.Nationality)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.SpecialRequest)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.Guest).WithMany(p => p.TourBookings)
                .HasForeignKey(d => d.GuestId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TourBooking_Guest");

            entity.HasOne(d => d.Tour).WithMany(p => p.TourBookings)
                .HasForeignKey(d => d.TourId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_TourBooking_Tour");
        });

        modelBuilder.Entity<TourLocalized>(entity =>
        {
            entity.HasKey(e => new { e.LanguageId, e.TourId });

            entity.ToTable("TourLocalized");

            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Excludes)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.Includes)
                .IsRequired()
                .HasMaxLength(500)
                .HasColumnName("includes");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.WhatToBring)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.Language).WithMany(p => p.TourLocalizeds)
                .HasForeignKey(d => d.LanguageId)
                .HasConstraintName("FK_TourLocalized_Language");

            entity.HasOne(d => d.Tour).WithMany(p => p.TourLocalizeds)
                .HasForeignKey(d => d.TourId)
                .HasConstraintName("FK_TourLocalized_Tour");
        });

        modelBuilder.Entity<TourPhoto>(entity =>
        {
            entity.ToTable("TourPhoto");

            entity.Property(e => e.Photo)
                .IsRequired()
                .HasMaxLength(200);

            entity.HasOne(d => d.Tour).WithMany(p => p.TourPhotos)
                .HasForeignKey(d => d.TourId)
                .HasConstraintName("FK_TourPhoto_Tour");
        });

        modelBuilder.Entity<TourType>(entity =>
        {
            entity.ToTable("TourType");

            entity.Property(e => e.Photo)
                .IsRequired()
                .HasMaxLength(200);
        });

        modelBuilder.Entity<TourTypeLocalized>(entity =>
        {
            entity.HasKey(e => new { e.LanguageId, e.TourTypeId });

            entity.ToTable("TourTypeLocalized");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Language).WithMany(p => p.TourTypeLocalizeds)
                .HasForeignKey(d => d.LanguageId)
                .HasConstraintName("FK_TourTypeLocalized_Language");

            entity.HasOne(d => d.TourType).WithMany(p => p.TourTypeLocalizeds)
                .HasForeignKey(d => d.TourTypeId)
                .HasConstraintName("FK_TourTypeLocalized_TourType");
        });

        modelBuilder.Entity<TransferBooking>(entity =>
        {
            entity.ToTable("TransferBooking");

            entity.Property(e => e.CreatedAt).HasColumnType("smalldatetime");
            entity.Property(e => e.Destination)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.PickUpDateTime).HasColumnType("smalldatetime");
            entity.Property(e => e.PickUpLocation)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.SpecialRequest).HasMaxLength(250);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.Guest).WithMany(p => p.TransferBookings)
                .HasForeignKey(d => d.GuestId)
                .HasConstraintName("FK_TransferBooking_Guest");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}